AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Create Lambda Function using cloudformation
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label: 
        default: "Lambda Function"
      Parameters: 
        - LambdaFunction
        - LambdaS3Role
    -
      Label: 
        default: "Api Gateway"
      Parameters: 
        - RestApi
        
        - RestApiDeployment
        - LambdaApiGatewayResource
        - LambdaApiGatewayMethod
        - LambdaFunctionApiGatewayPermission

Parameters:
  LambdaFunctionName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: mylambdafunction
    Description: Give your Lambda Function name
    MaxLength: 64
    MinLength: 8
    Type: String

  ApiGateWayName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: myapigateway
    Description: Give your Apigateway name
    MaxLength: 64
    MinLength: 1
    Type: String

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: org.example.App::handleRequest
      Role: !GetAtt LambdaS3Role.Arn
      Code:
        S3Bucket: my1sts3bucketinaws
        S3Key: cloudtest-1.0-SNAPSHOT.jar
      Runtime: java8
      Timeout: 300

  LambdaS3Role:
    Type: AWS::IAM::Role
    Properties:
      Description: this is a role for lambda
      RoleName: AmazonS3FullAccessRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AmazonS3FullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            - s3-object-lambda:*
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudwatch:*
            Resource: "*"

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
        - REGIONAL
      Name: !Ref ApiGateWayName

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - LambdaApiGatewayMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: dev

  # Route 1: GET /send
  LambdaApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: send
      RestApiId: !Ref RestApi

  LambdaApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
    - LambdaFunctionApiGatewayPermission
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      MethodResponses:
        - StatusCode: 200
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS
        Uri:
          !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref AWS::Region
            - :lambda:path/2015-03-31/functions/
            - !GetAtt LambdaFunction.Arn
            - /invocations
      ResourceId: !Ref LambdaApiGatewayResource
      RestApiId: !Ref RestApi

  LambdaFunctionApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref RestApi
          - //
 
Outputs:
  LambdaFunction:
    Description: Lambda
    Export:
      Name: !Sub ${AWS::StackName}-LambdaFunction
    Value: !Ref LambdaFunction

  ApiUrl:
    Description: URL of the REST API.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: RestApi
        - .execute-api.
        - Ref: AWS::Region
        - .
        - Ref: AWS::URLSuffix
        - /dev